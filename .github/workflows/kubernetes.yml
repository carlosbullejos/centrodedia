name: Kubernetes infraestructura
on:
  push:
    paths:
      - "kubernetes/**.yaml"
      - "envs/prod/**.tf"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1-4) Pasos iniciales (sin cambios)
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        working-directory: envs/prod
        run: terraform init -input=false
      - name: Set environment variables for Terraform
        run: |
         echo "TF_VAR_aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
         echo "TF_VAR_aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
         echo "TF_VAR_aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
         echo "TF_VAR_aws_region=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
         echo "TF_VAR_git_token=${{ secrets.GIT_TOKEN }}" >> $GITHUB_ENV
       

      # 5) Terraform Apply
      - name: Terraform Apply
        working-directory: envs/prod
        run: terraform apply -auto-approve -input=false

      # 6-7) Configuraci√≥n de Kubectl (sin cambios)
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name centrodedia-cluster --region us-east-1

      # 8) Instalar jq para procesar JSON
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

# 9) Aplicar el StorageClass y PV (M√âTODO FINAL Y ROBUSTO)
      - name: Apply EFS StorageClass & PV from Terraform Output
        working-directory: envs/prod
        run: |
          echo "üîÑ Aplicando el StorageClass y PersistentVolume generados por Terraform..."
          # SECUENCIA CORRECTA:
          # 1. terraform output -raw: Obtiene el valor crudo (que es una cadena JSON).
          # 2. tail -n 1: Se queda solo con la √∫ltima l√≠nea para eliminar la basura del runner.
          # 3. jq -r .: Decodifica la cadena JSON para extraer el YAML original.
          # 4. kubectl apply: Aplica el YAML limpio.
          terraform output -raw efs_storageclass_manifest | tail -n 1 | jq -r . | kubectl apply --validate=false -f -

      # ... (El resto de los pasos son iguales) ...
      - name: Apply other manifests
        run: |
          kubectl apply -f kubernetes/shared-pvc.yaml
          kubectl apply -f kubernetes/configmap.yml
          kubectl apply -f kubernetes/ftp.yaml
          kubectl apply -f kubernetes/ftpsecret.yaml
          kubectl apply -f kubernetes/mysql.yaml
          kubectl apply -f kubernetes/nginx.yaml
          kubectl apply -f kubernetes/php.yaml
      - name: Verify rollout
        run: |
          kubectl rollout status deployment/carlos-web-deployment --timeout=5m
          kubectl rollout status deployment/php-fpm-deployment --timeout=3m
          kubectl rollout status deployment/mysql-deployment --timeout=3m
          kubectl rollout status deployment/ftp-server --timeout=3m
      - name: Get NGINX Service External IP
        run: |
          SERVICE_NAME="nginx-service"
          NAMESPACE="default"
          echo "üîé Buscando la IP externa para el servicio '$SERVICE_NAME'..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get service $SERVICE_NAME --namespace $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "‚úÖ ¬°Encontrado! El endpoint de tu servicio es:"
              echo "--------------------------------------------------"
              echo $EXTERNAL_IP
              echo "--------------------------------------------------"
              exit 0
            fi
            echo "Esperando la IP externa... (Intento $i de 30)"
            sleep 10
          done
          echo "‚ùå Error: No se pudo obtener la IP externa."
          exit 1
