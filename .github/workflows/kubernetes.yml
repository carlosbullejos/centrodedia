name: Kubernetes infraestructura
on:
  push:
    paths:
      - "kubernetes/**.yaml"
      - "envs/prod/**.tf" # Buena pr√°ctica: triggerear tambi√©n con cambios de TF
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - uses: actions/checkout@v4

      # 2) Configurar credenciales de AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # 3) Instalar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # 4) Terraform Init
      - name: Terraform Init
        working-directory: envs/prod
        run: terraform init -input=false

      # 5) Instalar kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # 6) Configurar kubeconfig para EKS
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name centrodedia-cluster --region us-east-1

      # 7) APLICAR EL STORAGECLASS Y PV GENERADOS POR TERRAFORM
      - name: Apply EFS StorageClass & PV from Terraform Output
        working-directory: envs/prod
        run: |
          echo "üîÑ Aplicando el StorageClass y PersistentVolume generados por Terraform..."
          terraform output -raw efs_storageclass_manifest | kubectl apply -f -

      # 8) APLICAR EL RESTO DE MANIFIESTOS
      - name: Apply other manifests
        run: |
          # Aseg√∫rate de que los ficheros que definen el SC y el PV no est√°n aqu√≠.
          # El orden es importante: primero el PVC para que los pods puedan usarlo.
          kubectl apply -f kubernetes/shared-pvc.yaml
          kubectl apply -f kubernetes/configmap.yml
          kubectl apply -f kubernetes/ftp.yaml
          kubectl apply -f kubernetes/ftpsecret.yaml
          kubectl apply -f kubernetes/mysql.yaml
          kubectl apply -f kubernetes/nginx.yaml
          kubectl apply -f kubernetes/php.yaml

      # 9) Verificar el despliegue y obtener IP (como antes)
      - name: Verify rollout
        run: |
          kubectl rollout status deployment/carlos-web-deployment --timeout=5m
          kubectl rollout status deployment/php-fpm-deployment --timeout=3m
          kubectl rollout status deployment/mysql-deployment --timeout=3m
          kubectl rollout status deployment/ftp-server --timeout=3m

      - name: Get NGINX Service External IP
        run: |
          SERVICE_NAME="nginx-service"
          NAMESPACE="default"
          echo "üîé Buscando la IP externa para el servicio '$SERVICE_NAME'..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get service $SERVICE_NAME --namespace $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "‚úÖ ¬°Encontrado! El endpoint de tu servicio es:"
              echo "--------------------------------------------------"
              echo $EXTERNAL_IP
              echo "--------------------------------------------------"
              exit 0
            fi
            echo "Esperando la IP externa... (Intento $i de 30)"
            sleep 10
          done
          echo "‚ùå Error: No se pudo obtener la IP externa."
          exit 1
