---
- name: Build & Push Docker images to ECR
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    aws_region:    "us-east-1"
    aws_account:   "799880597301"
    ecr_registry:  "{{ aws_account }}.dkr.ecr.{{ aws_region }}.amazonaws.com"
    templates_dir: "{{ playbook_dir }}/../templates"
    build_root:    "{{ playbook_dir }}/../build"

  tasks:
    - name: Clean build directory
      ansible.builtin.file:
        path: "{{ build_root }}"
        state: absent

    - name: Create build root directory
      ansible.builtin.file:
        path: "{{ build_root }}"
        state: directory
        mode: "0755"

    - name: Create nginx build context
      ansible.builtin.file:
        path: "{{ build_root }}/nginx"
        state: directory
        mode: "0755"

    - name: Template NGINX Dockerfile
      ansible.builtin.template:
        src: "{{ templates_dir }}/Dockerfile_nginx.j2"
        dest: "{{ build_root }}/nginx/Dockerfile"
        mode: "0644"

    - name: Copy nginx.conf
      ansible.builtin.copy:
        src: "{{ templates_dir }}/nginx.conf"
        dest: "{{ build_root }}/nginx/nginx.conf"
        mode: "0644"

    - name: Copy server.conf
      ansible.builtin.copy:
        src: "{{ templates_dir }}/server.conf"
        dest: "{{ build_root }}/nginx/server.conf"
        mode: "0644"

    - name: Copy fullchain.pem
      ansible.builtin.copy:
        src: "{{ templates_dir }}/fullchain.pem"
        dest: "{{ build_root }}/nginx/fullchain.pem"
        mode: "0644"

    - name: Copy private.key
      ansible.builtin.copy:
        src: "{{ templates_dir }}/private.key"
        dest: "{{ build_root }}/nginx/private.key"
        mode: "0600"

    - name: Create php_fpm build context
      ansible.builtin.file:
        path: "{{ build_root }}/php_fpm"
        state: directory
        mode: "0755"

    - name: Template PHP-FPM Dockerfile
      ansible.builtin.template:
        src: "{{ templates_dir }}/Dockerfile_php.j2"
        dest: "{{ build_root }}/php_fpm/Dockerfile"
        mode: "0644"

    - name: Create mysql build context
      ansible.builtin.file:
        path: "{{ build_root }}/mysql"
        state: directory
        mode: "0755"

    - name: Template MySQL Dockerfile
      ansible.builtin.template:
        src: "{{ templates_dir }}/Dockerfile_mysql2.j2"
        dest: "{{ build_root }}/mysql/Dockerfile"
        mode: "0644"

    - name: Create apache build context
      ansible.builtin.file:
        path: "{{ build_root }}/apache"
        state: directory
        mode: "0755"

    - name: Template Apache Dockerfile
      ansible.builtin.template:
        src: "{{ templates_dir }}/Dockerfile_apache.j2"
        dest: "{{ build_root }}/apache/Dockerfile"
        mode: "0644"

    - name: Create ftp build context
      ansible.builtin.file:
        path: "{{ build_root }}/ftp"
        state: directory
        mode: "0755"

    - name: Template FTP Dockerfile
      ansible.builtin.template:
        src: "{{ templates_dir }}/Dockerfile_ftp.j2"
        dest: "{{ build_root }}/ftp/Dockerfile"
        mode: "0644"

    - name: Copy vsftpd.conf
      ansible.builtin.copy:
        src: "{{ templates_dir }}/vsftpd.conf"
        dest: "{{ build_root }}/ftp/vsftpd.conf"
        mode: "0644"

    - name: Copy vsftpd virtual users
      ansible.builtin.copy:
        src: "{{ templates_dir }}/vsftpd_virtual"
        dest: "{{ build_root }}/ftp/vsftpd_virtual"
        mode: "0644"

    - name: Ensure Docker is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Authenticate to ECR
      ansible.builtin.shell: |
        aws ecr get-login-password --region {{ aws_region }} \
          | docker login --username AWS --password-stdin {{ ecr_registry }}

    - name: Debug list nginx build context
      ansible.builtin.shell: |
        echo "Contents of {{ build_root }}/nginx:"
        ls -R {{ build_root }}/nginx
      register: nginx_ls

    - name: Show nginx build context
      ansible.builtin.debug:
        var: nginx_ls.stdout_lines

    - name: Build nginx image
      ansible.builtin.shell: >
        docker build -t carlos-web {{ build_root }}/nginx
      register: nginx_build
      failed_when: nginx_build.rc != 0

    - name: Show nginx build stderr
      ansible.builtin.debug:
        var: nginx_build.stderr_lines

    - name: Tag nginx image
      ansible.builtin.shell: >
        docker tag carlos-web {{ ecr_registry }}/imagenes:carlos-web

    - name: Push nginx image
      ansible.builtin.shell: >
        docker push {{ ecr_registry }}/imagenes:carlos-wweb

    - name: Build & push PHP-FPM image
      ansible.builtin.shell: |
        docker build -t php-fpm {{ build_root }}/php_fpm \
        && docker tag php-fpm {{ ecr_registry }}/imagenes:php-fpm \
        && docker push {{ ecr_registry }}/imagenes:php-fpm

    - name: Build & push MySQL image
      ansible.builtin.shell: |
        docker build -t mysql-carlosbullejos {{ build_root }}/mysql \
        && docker tag mysql-carlosbullejos {{ ecr_registry }}/imagenes:mysql \
        && docker push {{ ecr_registry }}/imagenes:mysql

    - name: Build & push Apache image
      ansible.builtin.shell: |
        docker build -t apache {{ build_root }}/apache \
        && docker tag apache {{ ecr_registry }}/imagenes:apache \
        && docker push {{ ecr_registry }}/imagenes:apache

    - name: Build & push FTP image
      ansible.builtin.shell: |
        docker build -t ftp {{ build_root }}/ftp \
        && docker tag ftp {{ ecr_registry }}/imagenes:ftp \
        && docker push {{ ecr_registry }}/imagenes:ftp
